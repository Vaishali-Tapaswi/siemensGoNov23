Lab12 - panic + recover + defer
            package main
            import (
            	"fmt"
            	)
            func main(){
                fmt.Println("main start")
            	inputprocess()
            	fmt.Println("main completing...")
            	}
             
            func inputprocess(){
            	defer func(){
            		fmt.Println("in test")
            		r := recover()
            		if r != nil {
            			fmt.Println("Recovered  inputprocess in function test ", r)
            		}
            	}()
            	fmt.Println("------------input process start")
            	var count int
            	fmt.Println("Count = " , count)
            	fmt.Println("Please enter a number :")
            	no1, err:=fmt.Scan(&count)
            	fmt.Println("Count = " , count)
            	fmt.Println("No1 = " , no1 , "  , Error = ", err)
            	if err!= nil{
            		fmt.Println("Exception... ", err)
            		panic("Problem with input..........")
            	}
            	fmt.Println("------------input process end")
            }
            

Lab11 - panic 
            package main
            import (
            	"fmt"
            	)
            func main(){
                fmt.Println("main start")
            	inputprocess()
            	fmt.Println("main completing...")
            	}
             
            func inputprocess(){
            	fmt.Println("------------input process start")
            	var count int
            	fmt.Println("Count = " , count)
            	fmt.Println("Please enter a number :")
            	no1, err:=fmt.Scan(&count)
            	fmt.Println("Count = " , count)
            	fmt.Println("No1 = " , no1 , "  , Error = ", err)
            	if err!= nil{
            		fmt.Println("Exception... ", err)
            		panic("Problm with input..........")
            	}
            	fmt.Println("------------input process end")
            }
Lab10 - receiver methods
            package main
            import (
            	"fmt"
            
            )
            func main(){
            	p1 := Point{10,40}
            	fmt.Println("P1 = " , p1)
            	var trans Transform
            	trans = p1
            	trans.shift()
            	p1.shift()
            	fmt.Println("P1 = " , p1)
            	
            }
            func (p Point) shift()  {
            	fmt.Println("Shift invoked ...")	
            }
            type Point struct {
            	X int
            	Y int
            }
            type Transform interface {
            	shift() 
            }

Lab9 - Create Struct as Emp
            Empno int, Ename String, Salary int
            2 functions
                        incrSalary(int percent)
                        print ()
Lab8 - struct -Modify function to receiver methods 
            func (p *Point) shift( x int, y int) {
            	fmt.Println("Start of Shift ", p)
            	p.X += x 
            	p.Y += y
            	fmt.Println("End of Shift ", p)
                        }
            func (p1 Point) print(){
                        fmt.Printf("Point - x = %d, y = %d", p1.X, p1.Y)
            }


            Modify code to have two functions 
                        1. shift - accept two inputs and modify point accordingly
                        2. print - just to print point details
            package main
            import (
            	"fmt"
            	)
            func main(){
                p1 := Point{10,50}
            	fmt.Println("p1 = "  , p1)
            	p1 = Point{Y:10}
            	fmt.Println("p1 = "  , p1)
            	p1.X = 4000
            	fmt.Println("p1 = "  , p1)
            	}
            
            type Point struct {
            	X int
            	Y int
            }


Lab7 - defer
            package main
            import (
            	"fmt"
            )
            func main(){
            	str := "Simple"
            	defer fmt.Println(str, "  1")
            	fmt.Println("2")
            	m1()
            	fmt.Println("3")
            	str = "Complex"
            	fmt.Println(str, "  1")
            	fmt.Println("4")
            }
            
            func m1(){
            	defer fmt.Println("m1- defer -line")
            
            	fmt.Println("m1 - 1")
            	fmt.Println("m1 - 2")
            }
Lab6 - Demo2/Lab1.go - closure
            package main
            import "fmt"
            func adder() func(int) int {
            	fmt.Println("Adder invoked ")
            	sum := 0
            	return func(x int) int {
            		fmt.Println("in return function")
            		sum += x
            		return sum
            	}
            }
            
            func main(){
            	fnref := adder()
            	fmt.Println(fnref)
            	fmt.Println(fnref(10))
            	fmt.Println(fnref(10))
            	fmt.Println(fnref(10))
            	fmt.Println(fnref(10))
            	
            }
Lab5 - show fib series of 10 numbers 
Lab4 -  named return, multiple returns, _
            package main
            import (
            	"fmt"
            	)
            func main(){
                fmt.Println("Hello World !!")
            	sum, sub, mult, div:= calc(100,10)
            	fmt.Println(sum, sub, mult, div )
            	sum1, sub1, _, _:= calc(1000,100)
            	fmt.Println(sum1, sub1)
            	s1, s2 := "first", "second"
            	s1, s22 := swap(s1, s2)
            	fmt.Println("Swapped ", s1, s22)
            	}
            /*	
            func calc(n1 int, n2 int) (int, int, int, int){
            	return n1+n2, n1-n2, n1*n2, n1/n2
            }
            */
            // named return
            func calc(n1, n2 int) (sum, sub, mult, div int){
            	sum, sub, mult, div = n1+n2, n1-n2, n1*n2, n1/n2
            	return 
            }
            func swap (s1, s2 string)  (string, string){
            	return s2, s1
            }

Lab3 - write 4 functions add, divide, sub, mult and invoke 
            
Lab3 - function declaration and invocation
    package main
    import (
    	"fmt"
    	)
    func main(){
       sum := add(10,20)
       fmt.Println("Sum = ", sum)
    	}
    func add(n1 int, n2 int) int {
    	return n1+ n2
    }
    	
Lab2 - := (declare and initialize), multiple variables and types on single line
    package main
    import (
    	"fmt"
    	)
    func main(){
       no1, no2 := 200, 4000
       fmt.Println("No1 = " , no1 , " No2 = " , no2)
       ans := no1 + no2
       fmt.Printf("Ans = %d ", ans)
    }
Lab1 -   
    package main
    import (
    	"fmt"
    	)
    func main(){
        fmt.Println("Hello World !!")
    	}

  cmd>go build Lab1.go -> will create exe
  cmd>go run Lab1.go -> will create exe in temp folder and run it
  try putting { on next line and check error)
  browser -> check go docs for fmt

    	
