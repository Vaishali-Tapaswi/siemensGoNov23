Lab6 - Create a library/Module
	create a folder Demo9
		two subfolder -> calc, usecalc
		in calc
			demo.go
				package calc
				func Add(n1 int, n2 int) int {
					return n1+ n2
				}
			demo1.go
				package calc
				func Divide(n1 int, n2 int) int {
					return n1/n2
				}
			calc>go mod init fands.com/calc
			calc>go mod tidy
		in usecalc
			Lab1.go
				package main
				import (
					"fmt"
					"fands.com/calc"
					)
				func main(){
				   ans := calc.Add(10,20)
				   fmt.Println("Sum = ", ans)
				   ans = calc.Divide(50,10)
				   fmt.Println("Divide = ", ans)
				}
			usecalc>go mod init demo9
			usecalc>go mod tidy
				-> check error
			usecalc>go mod edit -replace fands.com/calc=../calc
			usecalc>go mod tidy
			usecalc>go run Lab1.go

Lab5 - Mocking with testify
	Lab2.go
		package main
		
		import (
		    "fmt"
		)
		type Emp struct{}
		func (c *Emp) modify(key,value string)string{
			fmt.Println("Connecting to Postgres server to get data from Emp")
			return value
		}
		
		func main() {
		    fmt.Println("Hello World")
			e := Emp{}
			e.modify("appname","Lab8")
		}
	Lab2_test.go
		package main
		
		import (
		    "fmt"
		    "testing"
			"github.com/stretchr/testify/assert"
			"github.com/stretchr/testify/mock"
		)
		
		type EmpMock struct {
		    mock.Mock
		}
		
		func (c *EmpMock) modify(key,value string)string{
			fmt.Println("Modify Mock, don't connect to redis")
			args := c.Called(key,value)
			x:= args.String(0)
			return x;
		}
		func TestModifyMock(t *testing.T) {
			empmock := new(EmpMock)
			fmt.Println("initialized Redis Mock")
			empmock.On("modify","uname","Vaishali").Return("Vaishali")
			empmock.On("modify","uname","Tapaswi").Return("Tapaswi")
			assert.Equal(t, empmock.modify("uname","Vaishali"),"Vaishali")
			assert.Equal(t, empmock.modify("uname","Tapaswi"),"Tapaswi")
			}
		/*
		func TestModify(t *testing.T) {
			emp:= Emp{}
			fmt.Println("Direct invoke, no mocking")
			assert.Equal(t, emp.modify("uname","Vaishali"),"Vaishali")
			assert.Equal(t, emp.modify("uname","Tapaswi"),"Tapaswi")
		   }
		*/
	cmd> mod init, tidy, test
Lab4 - testing (demo8)
	Lab1.go 
		package main
		import (
			"fmt"
			"strconv"
		)
		func add(i,j int)int{
			fmt.Println("add invoked with " , i ," and " ,j)
			return i+j
		}
		func divide(str1,str2 string) int {
			no1,_ := strconv.Atoi(str1)
			no2,_ := strconv.Atoi(str2)
			return no1/no2
		}
		func main(){
			fmt.Println("add of 10 and 10 is " , add(10,10))
			fmt.Println("divide of 100 and 10 is " , divide("100","10"))
			fmt.Println("divide of a and 10 is " , divide("a","10"))
			fmt.Println("divide of 100 and a is " , divide("100","a"))
		}
	Lab1_test.go
		package main
		import (
		//	"fmt"
			"testing"
		)
		
		/*
		func TestAdd(t *testing.T){
			got := add(10,10)
		    if got != 20 {
		        t.Errorf("add(10,20) = %d; want 20", got)
		    }
		}
		*/
		func TestDivide(t *testing.T){
			got := divide("100","10")
		    if got != 10 {
		        t.Errorf("divide(100,10) = %d; want 10", got)
		    }
		}
		func TestDivide1(t *testing.T){
			got := divide("a","10")
		    if got != 0 {
		        t.Errorf("divide('a',10) = %d; want 0", got)
		    }
		}
		func TestDivide0(t *testing.T){
			// divide by 0 -> panic
			defer func() {
		        if r := recover(); r == nil {
		            t.Errorf("divide('10','0') has not given panic")
		        }
		    }()
		divide("10","0")
		}
	cmd>go test Lab1_test.go 
		check error
	cmd>go test Lab1_test.go Lab1.go 
	cmd>go test -v Lab1_test.go Lab1.go
	cmd>go test -v -cover  Lab1_test.go Lab1.go
		coverage %age
	cmd>go test -v -cover  Lab1_test.go Lab1.go -coverprofile tmp.txt
		observe tmp.txt
	cmd>go tool cover -html=tmp.txt -o tmp.html
		open/read tmp.html
	
Lab3 With decoder 
	package main
	
	import (
		"encoding/json"
		"fmt"
		"net/http"
	)
	
	type Emp struct {
		Empno  int    `json:"eno"`
		Ename  string `json:"empname"`
		Salary int    `json:"salary"`
	}
	
	func main() {
		empslice := make([]Emp, 0)
	
		http.HandleFunc("/emp",
			func(w http.ResponseWriter, r *http.Request) {
				fmt.Println("in handlefunc of emp, method =  ", r.Method)
				switch r.Method {
				case "GET":
					bytes, _ := json.Marshal(empslice)
					w.Write(bytes)
				case "POST":
					decoder := json.NewDecoder(r.Body)
					var emp Emp
					_ = decoder.Decode(&emp)
					//bodycontent, _ := io.ReadAll(r.Body)
					//_ = json.Unmarshal(bodycontent, &emp)
					empslice = append(empslice, emp)
	
				default:
					fmt.Println("in default")
					fmt.Fprintf(w, "default, %q", r.URL.Path)
				}
			})
	
		http.ListenAndServe(":8080", nil)
	}

Lab3 - create object of Emp and print 
    package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
//	"os"
//	"io/ioutil"
)
type Emp struct{
	Empno int `json:"eno"`
	Ename string `json:"empname"`
	Salary int `json:"salary"`
}
func main() {
	empslice := make([]Emp,0)
	
	http.HandleFunc("/emp", 
		func(w http.ResponseWriter, r *http.Request) {
		 fmt.Println("in handlefunc of emp, method =  " , r.Method)
		 switch r.Method{
		 case "GET":
			fmt.Println("in get")
			fmt.Fprintf(w, "GET, %q", r.URL.Path)	
			// slice.marshal ->
			//	e1 := Emp{1,"One",1111}
			//bytes, err := json.Marshal(e1)

			// w.Write([]byte) (int, error)
		case "POST":
			fmt.Println("in post", r.Body)
			fmt.Fprintf(w, "post, %q", r.URL.Path)	
			bodycontent, _ := io.ReadAll(r.Body)
			var emp Emp 
			_ = json.Unmarshal(bodycontent, &emp)
			empslice = append(empslice, emp) 

			fmt.Println("in emp details", emp)
			
			fmt.Println("in emp slice", empslice)
			
			//convert byte array to struct (Unmarshal)
		default:
			fmt.Println("in default")
			fmt.Fprintf(w, "default, %q", r.URL.Path)	
		}
	})

	http.ListenAndServe(":8080", nil)
}


Lab2 - https://mholt.github.io/json-to-go/
      https://reqres.in/api/users/2
      Write code to fetch user details(accept userid as argument), unmarshal, show email address of user
Lab1 - Write unmarshal
      package main
        import (
        	"fmt"
        	"encoding/json"
        )
        type Emp struct{
        	Empno int `json:"eno"`
        	Ename string `json:"empname"`
        	Salary int `json:"salary"`
        }
        func main(){
        	e1 := Emp{1,"One",1111}
        	bytes, err := json.Marshal(e1)
        	fmt.Println("Bytes =  ", string(bytes), ", Error = ", err)
        }


MicroServices - https://martinfowler.com/articles/microservices.html
       https://www.youtube.com/watch?v=wgdBVIX9ifA
