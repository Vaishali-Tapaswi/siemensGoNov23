Lab3 With decoder 
	package main
	
	import (
		"encoding/json"
		"fmt"
		"net/http"
	)
	
	type Emp struct {
		Empno  int    `json:"eno"`
		Ename  string `json:"empname"`
		Salary int    `json:"salary"`
	}
	
	func main() {
		empslice := make([]Emp, 0)
	
		http.HandleFunc("/emp",
			func(w http.ResponseWriter, r *http.Request) {
				fmt.Println("in handlefunc of emp, method =  ", r.Method)
				switch r.Method {
				case "GET":
					bytes, _ := json.Marshal(empslice)
					w.Write(bytes)
				case "POST":
					decoder := json.NewDecoder(r.Body)
					var emp Emp
					_ = decoder.Decode(&emp)
					//bodycontent, _ := io.ReadAll(r.Body)
					//_ = json.Unmarshal(bodycontent, &emp)
					empslice = append(empslice, emp)
	
				default:
					fmt.Println("in default")
					fmt.Fprintf(w, "default, %q", r.URL.Path)
				}
			})
	
		http.ListenAndServe(":8080", nil)
	}

Lab3 - create object of Emp and print 
    package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
//	"os"
//	"io/ioutil"
)
type Emp struct{
	Empno int `json:"eno"`
	Ename string `json:"empname"`
	Salary int `json:"salary"`
}
func main() {
	empslice := make([]Emp,0)
	
	http.HandleFunc("/emp", 
		func(w http.ResponseWriter, r *http.Request) {
		 fmt.Println("in handlefunc of emp, method =  " , r.Method)
		 switch r.Method{
		 case "GET":
			fmt.Println("in get")
			fmt.Fprintf(w, "GET, %q", r.URL.Path)	
			// slice.marshal ->
			//	e1 := Emp{1,"One",1111}
			//bytes, err := json.Marshal(e1)

			// w.Write([]byte) (int, error)
		case "POST":
			fmt.Println("in post", r.Body)
			fmt.Fprintf(w, "post, %q", r.URL.Path)	
			bodycontent, _ := io.ReadAll(r.Body)
			var emp Emp 
			_ = json.Unmarshal(bodycontent, &emp)
			empslice = append(empslice, emp) 

			fmt.Println("in emp details", emp)
			
			fmt.Println("in emp slice", empslice)
			
			//convert byte array to struct (Unmarshal)
		default:
			fmt.Println("in default")
			fmt.Fprintf(w, "default, %q", r.URL.Path)	
		}
	})

	http.ListenAndServe(":8080", nil)
}


Lab2 - https://mholt.github.io/json-to-go/
      https://reqres.in/api/users/2
      Write code to fetch user details(accept userid as argument), unmarshal, show email address of user
Lab1 - Write unmarshal
      package main
        import (
        	"fmt"
        	"encoding/json"
        )
        type Emp struct{
        	Empno int `json:"eno"`
        	Ename string `json:"empname"`
        	Salary int `json:"salary"`
        }
        func main(){
        	e1 := Emp{1,"One",1111}
        	bytes, err := json.Marshal(e1)
        	fmt.Println("Bytes =  ", string(bytes), ", Error = ", err)
        }


MicroServices - https://martinfowler.com/articles/microservices.html
       https://www.youtube.com/watch?v=wgdBVIX9ifA
