Lab2 - create client(main method) and create lib(mod init, tidy, replace)
        client code
                package main
                import (
                	"fmt"
                	"mylib"
                )
                
                func main(){
                	s1 := mylib.GetInstance()
                	fmt.Println("s1 " , s1.Add())
                	fmt.Println("s1 " , s1.Add())
                	fmt.Println("s1 " , s1.Add())
                	fmt.Println("s1 " , s1.Add())
                	fmt.Println("s1 " , s1.Add())
                	s2 := mylib.GetInstance()
                	fmt.Println("s2 " , s2.Add())
                	fmt.Println("s2 " , s2.Add())
                }

        package mylib
        
        import (
            "fmt"
            "sync"
        )
        
        type single struct {
        	cnt int
         }
        func (s *single) Add() int{
        	s.cnt++
        	return s.cnt
        }
        var lock = &sync.Mutex{}
        var singleInstance *single
        
        func GetInstance() *single {
            if singleInstance == nil {
                lock.Lock()
                defer lock.Unlock()
                if singleInstance == nil {
                    fmt.Println("Creating single instance now.")
                    singleInstance = &single{}
                } else {
                    fmt.Println("Single instance already created.")
                }
            } else {
                fmt.Println("Single instance already created.")
            }
            return singleInstance
        }
        
Lab1 -  factory, change factory method to return error 
        package main
        import "fmt"
        type Driver interface{
        	open()
        	close()
        }
        type OracleDriver struct{
        }
        func (ora OracleDriver) close(){
        	fmt.Println("OracleDriver close method")
        }
        func (ora OracleDriver) open(){
        	fmt.Println("OracleDriver open method")
        }
        type MySQLDriver struct{
        }
        func (my MySQLDriver) open1(){
        	fmt.Println("MySQLDriver open1 method")
        }
        func (my MySQLDriver) close(){
        	fmt.Println("MySQLDriver close method")
        }
        func (my MySQLDriver) open(){
        	fmt.Println("MySQLDriver open method")
        }
        
        type Db struct{
        
        }
        func (db Db) getConnection(str string) (Driver){
        	if str=="ora"{
        		return OracleDriver{}
        	}
        	if str=="mysql"{
        		return MySQLDriver{}
        	}
        	return nil
        }
        func main(){
        	var driver Driver
        	db := Db{}
        	driver = db.getConnection("xxx")
        	driver.open()
        	driver.close()
        }
