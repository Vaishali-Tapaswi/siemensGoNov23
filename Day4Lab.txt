Lab4 - Observer
        package main

        import "fmt"
        
        //1. Create Interface for View
        type View interface {
        	Draw(cnt int)
        }
        
        //2. Multiple Implementations for views
        type PieChart struct {
        }
        func (p PieChart) Draw(cnt int) {
        	fmt.Println("PieChart Draw invoked with ", cnt)
        }
        
        type BarGraph struct {
        }
        func (b BarGraph) Draw(cnt int) {
        	fmt.Println("BarGraph Draw  invoked with ", cnt)
        }
        
        //3. Observer
        type Observer struct {
        	views []View
        }
        
        func (ob *Observer) addView(view View) {
        	ob.views = append(ob.views, view)
        }
        func (ob *Observer) update(cnt int) {
        	for _, v := range ob.views {
        		v.Draw(cnt)
        	}
        }
        
        //4. DataItem
        type DataItem struct {
        	cnt      int
        	observer Observer
        }
        
        func (dataitem *DataItem) setObserver(observer Observer) {
        	dataitem.observer = observer
        }
        func (dataitem *DataItem) setCnt(cnt int) {
        	if dataitem.cnt != cnt {
        		dataitem.cnt = cnt
        		dataitem.observer.update(dataitem.cnt)
        	}
        }
        
        //4. Main method
        func main() {
        	obs := Observer{}
        	v1, v2, v3 := PieChart{}, BarGraph{}, PieChart{}
        	obs.addView(View(v1))
        	obs.addView(v2)
        	obs.addView(v3)
        	dataitem := DataItem{}
        	dataitem.setObserver(obs)
        	dataitem.setCnt(40)
        	dataitem.setCnt(50)
        	dataitem.setCnt(50)
        }

Lab3 - https://www.dofactory.com/net/strategy-design-pattern
        
        strategy.go
        package main
        import "fmt"
        
        func main(){
        	var ss SortStrategy
        	ss = BubbleSort{}
        	sortlist := SortedList{ss}
        	sortlist.MySort()
        
        	sortlist.sortstrategy = ShellSort{}
        	sortlist.MySort()
        
        }
        type SortStrategy interface{
        	 Sort()
         }
         type ShellSort struct{}
         func (ss ShellSort) Sort(){
        	 fmt.Println("Sort of ShellSort invoked ")
         }
         type BubbleSort struct{}
         func (ss BubbleSort) Sort(){
        	 fmt.Println("Sort of BubbleSort invoked ")
         }
           
        type SortedList struct{
        	sortstrategy SortStrategy 
        }
        func (sl SortedList) MySort(){
        	fmt.Println("Accept 10 number")
        	sl.sortstrategy.Sort()
        	fmt.Println("Print Sorted numbers")
        }

Lab2 - create client(main method) and create lib(mod init, tidy, replace)
        client code
                package main
                import (
                	"fmt"
                	"mylib"
                )
                
                func main(){
                	s1 := mylib.GetInstance()
                	fmt.Println("s1 " , s1.Add())
                	fmt.Println("s1 " , s1.Add())
                	fmt.Println("s1 " , s1.Add())
                	fmt.Println("s1 " , s1.Add())
                	fmt.Println("s1 " , s1.Add())
                	s2 := mylib.GetInstance()
                	fmt.Println("s2 " , s2.Add())
                	fmt.Println("s2 " , s2.Add())
                }

        package mylib
        
        import (
            "fmt"
            "sync"
        )
        
        type single struct {
        	cnt int
         }
        func (s *single) Add() int{
        	s.cnt++
        	return s.cnt
        }
        var lock = &sync.Mutex{}
        var singleInstance *single
        
        func GetInstance() *single {
            if singleInstance == nil {
                lock.Lock()
                defer lock.Unlock()
                if singleInstance == nil {
                    fmt.Println("Creating single instance now.")
                    singleInstance = &single{}
                } else {
                    fmt.Println("Single instance already created.")
                }
            } else {
                fmt.Println("Single instance already created.")
            }
            return singleInstance
        }
        
Lab1 -  factory, change factory method to return error 
        package main
        import "fmt"
        type Driver interface{
        	open()
        	close()
        }
        type OracleDriver struct{
        }
        func (ora OracleDriver) close(){
        	fmt.Println("OracleDriver close method")
        }
        func (ora OracleDriver) open(){
        	fmt.Println("OracleDriver open method")
        }
        type MySQLDriver struct{
        }
        func (my MySQLDriver) open1(){
        	fmt.Println("MySQLDriver open1 method")
        }
        func (my MySQLDriver) close(){
        	fmt.Println("MySQLDriver close method")
        }
        func (my MySQLDriver) open(){
        	fmt.Println("MySQLDriver open method")
        }
        
        type Db struct{
        
        }
        func (db Db) getConnection(str string) (Driver){
        	if str=="ora"{
        		return OracleDriver{}
        	}
        	if str=="mysql"{
        		return MySQLDriver{}
        	}
        	return nil
        }
        func main(){
        	var driver Driver
        	db := Db{}
        	driver = db.getConnection("xxx")
        	driver.open()
        	driver.close()
        }
