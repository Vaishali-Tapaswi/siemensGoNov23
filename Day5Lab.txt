Lab3- 	

	create a folder Demo12
		package main
		
		import (
			//  "database/sql"
			"fmt"
			"github.com/lib/pq"
			"time"
		)
		
		// notifier encapsulates the state of the listener connection.
		type notifier struct {
			listener *pq.Listener
			failed   chan error
		}
		
		func newNotifier(dsn, channelName string) (*notifier, error) {
			n := &notifier{failed: make(chan error, 2)}
		
			listener := pq.NewListener(
				dsn,
				10*time.Second, time.Minute,
				n.logListener)
		
			if err := listener.Listen(channelName); err != nil {
				listener.Close()
				fmt.Println("ERROR!:", err)
				return nil, err
			}
		
			n.listener = listener
			return n, nil
		}
		
		// logListener is the state change callback for the listener.
		func (n *notifier) logListener(event pq.ListenerEventType, err error) {
			fmt.Println("in logListener event = ", event, " err = ", err)
			if event == pq.ListenerEventConnectionAttemptFailed {
				n.failed <- err
				fmt.Println("Error in logListener : ", err)
			}
		}
		
		// fetch is the main loop of the notifier to receive data from
		// the database in JSON-FORMAT and send it down the send channel.
		func (n *notifier) fetch(data chan []byte) error {
			fmt.Println("in fetch")
			var fetchCounter uint64
			for {
				select {
				case e := <-n.listener.Notify:
					fmt.Println("in listenernotify", e)
					if e == nil {
						continue
					}
					fetchCounter++
					fmt.Println("Current Count ", fetchCounter)
				case err := <-n.failed:
					fmt.Println("in err")
					return err
				case <-time.After(time.Minute):
					fmt.Println("in time.after")
					go n.listener.Ping()
				}
			}
		}
		
		// close closes the notifier.
		func (n *notifier) close() error {
			close(n.failed)
			return n.listener.Close()
		}
		func main() {
			sqlstr := "postgres://postgres:postgres@localhost/postgres?sslmode=disable"
			var mychan chan []byte
			notifier, error := newNotifier(sqlstr, "mychan")
			fmt.Println("notifier ", notifier, "err ", error)
			notifier.fetch(mychan)
			notifier.listener.Listen("demo1")
		}


	create module and run code
		postgres database -> create function, create trigger to send notification
	on pd admin
		CREATE OR REPLACE FUNCTION demo1()
		  RETURNS TRIGGER 
		  LANGUAGE PLPGSQL
		  AS
		$$
		BEGIN
			PERFORM pg_notify('mychan', 'Message');
			RETURN NEW;
		END;
		$$
	
	CREATE TRIGGER rowinserted
	  AFTER INSERT
	  ON emp
	  FOR EACH ROW
	  EXECUTE PROCEDURE demo1();


Lab2 - https://medium.com/learning-the-go-programming-language/writing-modular-go-programs-with-plugins-ec46381ee1a9
	Run -> 1. no parameter
	       2. swe (valid switch case but invalid module)
	       3. invalid function call / invalid interface


Lab1 - GoLicenses
	git clone https://github.com/google/go-licenses  (download)
	cd go-licenses
	Download required modules:
	go mod download/tidy
	go build . 
	
	in your project dir 
		go-licenses.exe report .
